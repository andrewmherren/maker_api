name: SonarCloud Analysis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonar:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout the repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Setup Python & PlatformIO
      - name: Setup Python & PlatformIO
        run: |
          sudo apt update
          sudo apt install -y gcc g++ make python3-pip lcov unzip wget
          pip3 install platformio

      # 3Ô∏è‚É£ Debug: Show starting directory
      - name: Debug starting directory
        run: |
          echo "PWD = $PWD"
          ls -R .

      # 4Ô∏è‚É£ Setup SonarScanner
      - name: Setup SonarScanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          echo "$PWD/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      # 5Ô∏è‚É£ Setup Build Wrapper
      - name: Setup Build Wrapper
        run: |
          mkdir -p build-tools
          cd build-tools
          wget https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
          unzip build-wrapper-linux-x86.zip
          chmod +x build-wrapper-linux-x86/build-wrapper-linux-x86-64
          echo "BUILD_WRAPPER_PATH=$PWD/build-wrapper-linux-x86/build-wrapper-linux-x86-64" >> $GITHUB_ENV
          cd $GITHUB_WORKSPACE

      # 6Ô∏è‚É£ Run PlatformIO build & tests with build-wrapper
      - name: Build and test with build-wrapper
        run: |
          mkdir -p bw-output
          echo "Running PlatformIO tests..."
          $BUILD_WRAPPER_PATH --out-dir bw-output pio test -e test_native

      # 7Ô∏è‚É£ Generate C++ coverage data
      - name: Generate coverage data
        run: |
          echo "Generating coverage data..."
          # cd .pio/build/test_native
          # find . -name "*.gcno" -exec gcov -b -l -p -c {} \;
          # cd $GITHUB_WORKSPACE

          echo "Generating lcov coverage info..."
          lcov --base-directory . \
              --directory .pio/build/test_native \
              --capture \
              --output-file coverage.info \
              --rc lcov_branch_coverage=1 

          gcovr -r . --xml-pretty -o coverage.xml

          # echo "Filtering out system and library files..."
          # lcov --remove coverage.info '/usr/*' '.pio/*' --output-file coverage.cleaned.info

          # echo "head of absolute path file..."
          # head -n 40 coverage.cleaned.info

          # echo "Converting absolute paths to relative paths..."
          # sed -i 's|SF:.*/src/|SF:src/|' coverage.cleaned.info
          # sed -i 's|SF:.*/include/|SF:include/|' coverage.cleaned.info

          # echo "Coverage summary:"
          # lcov --summary coverage.cleaned.info

          # pwd
          # ls -l coverage.cleaned.info

          # echo "head of relative path file..."
          # head -n 40 coverage.cleaned.info

          # echo "üì¶ Moving final coverage report to workspace root..."
          # mv coverage.cleaned.info coverage.info || true

          # ls -l coverage.info

          echo "‚úÖ Coverage generation complete. coverage.info ready for SonarCloud."

      # # 8Ô∏è‚É£ Upload artifacts
      # - name: Upload coverage artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: coverage-info
      #     path: coverage.info

      - name: Fix shallow clone for SonarCloud
        run: |
          git fetch --prune --unshallow || true
          git fetch origin +refs/heads/main:refs/remotes/origin/main || true

      # 9Ô∏è‚É£ Run SonarCloud analysis
      - name: Run SonarCloud analysis
        run: |
          echo "Running sonar-scanner..."
          sonar-scanner \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.organization=andrewmherren \
            -Dsonar.projectKey=andrewmherren_maker_api \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.sources=$GITHUB_WORKSPACE/src,$GITHUB_WORKSPACE/include \
            -Dsonar.tests=$GITHUB_WORKSPACE/test \
            -Dsonar.exclusions=**/build-wrapper-dump.json \
            -Dsonar.coverage.exclusions=**/test/**/* \
            -Dsonar.cfamily.compile-commands=$GITHUB_WORKSPACE/bw-output/compile_commands.json \
            # -Dsonar.cfamily.gcov.reportsPath=$GITHUB_WORKSPACE \
            -Dsonar.cfamily.gcov.xmlReportPaths=$GITHUB_WORKSPACE/coverage.xml \
            -Dsonar.cpp.file.suffixes=.cpp,.h,.hpp \
            -Dsonar.c.file.suffixes=.c \
            -Dsonar.lang.patterns.cpp=**/*.cpp,**/*.h,**/*.hpp \
            -Dsonar.lang.patterns.c=**/*.c \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.working.directory=$GITHUB_WORKSPACE/.scannerwork

name: SonarCloud Analysis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonar:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout the repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Setup Python and PlatformIO
      - name: Setup Python & PlatformIO
        run: |
          sudo apt update
          sudo apt install -y gcc g++ make python3-pip lcov
          pip3 install platformio

      # 3Ô∏è‚É£ Optional: Setup conda if needed (copied from your previous workflow)
      # Uncomment if you want conda environments
      #- name: Setup Miniconda
      #  run: |
      #    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
      #    bash miniconda.sh -b -p $HOME/miniconda
      #    export PATH="$HOME/miniconda/bin:$PATH"
      #    conda init bash
      #    source ~/.bashrc
      #    conda env create -f environment.yml
      #    conda activate obscura-panel-4led

      # 4Ô∏è‚É£ Debug: Show files at start
      - name: Debug starting directory
        run: |
          echo "PWD = $PWD"
          ls -R .

      # 5Ô∏è‚É£ Setup SonarScanner
      - name: Setup SonarScanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          export PATH=$PATH:$PWD/sonar-scanner-5.0.1.3006-linux/bin
          echo "SonarScanner version:"
          sonar-scanner --version

      # 6Ô∏è‚É£ Setup build-wrapper
      - name: Setup Build Wrapper
        run: |
          mkdir -p build-tools
          cd build-tools
          wget https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
          unzip build-wrapper-linux-x86.zip

          # Make the binary executable (note the directory)
          chmod +x build-wrapper-linux-x86/build-wrapper-linux-x86-64

          # Save path for later steps
          BUILD_WRAPPER_PATH=$PWD/build-wrapper-linux-x86/build-wrapper-linux-x86-64
          echo "BUILD_WRAPPER_PATH=$BUILD_WRAPPER_PATH" >> $GITHUB_ENV

          cd $GITHUB_WORKSPACE

      # 7Ô∏è‚É£ Run PlatformIO build & tests with build-wrapper
      - name: Build and test with build-wrapper
        run: |
          mkdir -p bw-output
          echo "Running PlatformIO tests..."
          $BUILD_WRAPPER_PATH --out-dir bw-output pio test -e native

      # 8Ô∏è‚É£ Debug: show bw-output and .pio contents
      - name: Debug bw-output & .pio
        run: |
          echo "Contents of bw-output:"
          ls -R bw-output
          echo "Contents of .pio:"
          ls -R .pio

      # 9Ô∏è‚É£ Fix compile_commands.json paths
      - name: Normalize compile_commands.json for SonarCloud
        run: |
          echo "Backing up original compile_commands.json..."
          cp bw-output/compile_commands.json bw-output/compile_commands.json.bak

          echo "Normalizing compile_commands.json structure..."
          tmpfile=$(mktemp)
          jq --arg dir "$GITHUB_WORKSPACE" '
            map(
              .directory = $dir + "/" + (.directory | ltrimstr("./"))
              | .file = if (.file | startswith("/")) then .file else $dir + "/" + .file end
            )
          ' bw-output/compile_commands.json > "$tmpfile" && mv "$tmpfile" bw-output/compile_commands.json

          echo "Resulting entries (first 20):"
          jq -r '.[].file' bw-output/compile_commands.json | head -n 20

          echo "Checking that listed directories exist inside container:"
          jq -r '.[].directory' bw-output/compile_commands.json | sort -u | while read dir; do
            if [ -d "$dir" ]; then
              echo "‚úÖ Exists: $dir"
            else
              echo "‚ùå Missing: $dir"
            fi
          done

      # üîü Run SonarScanner
      - name: Run SonarCloud analysis
        run: |
          sonar-scanner \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.organization=liminalspark \
            -Dsonar.projectKey=liminalspark_maker_api \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.sources=$GITHUB_WORKSPACE/maker_api/src,$GITHUB_WORKSPACE/maker_api/include \
            -Dsonar.tests=$GITHUB_WORKSPACE/maker_api/test \
            -Dsonar.exclusions=**/build-wrapper-dump.json \
            -Dsonar.coverage.exclusions=**/test/**/* \
            -Dsonar.cfamily.compile-commands=$GITHUB_WORKSPACE/bw-output/compile_commands.json \
            -Dsonar.cfamily.gcov.reportsPath=$GITHUB_WORKSPACE/.pio/build/native \
            -Dsonar.cpp.file.suffixes=.cpp,.h,.hpp \
            -Dsonar.c.file.suffixes=.c \
            -Dsonar.lang.patterns.cpp=**/*.cpp,**/*.h,**/*.hpp \
            -Dsonar.lang.patterns.c=**/*.c \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.working.directory=$GITHUB_WORKSPACE/.scannerwork
